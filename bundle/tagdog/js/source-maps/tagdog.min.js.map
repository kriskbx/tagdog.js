{"version":3,"sources":["tagdog.js"],"names":["counter","eventType","window","ontouchend","keyCodes",8,13,188,"slice","Array","prototype","toString","Object","getType","obj","call","isString","isHTMLElement","HTMLElement","isNodeList","isArray","toArray","arrayContains","array","value","indexOf","qs","selector","element","document","querySelector","qsa","querySelectorAll","addClass","className","classes","split","push","join","bla","createElement","console","log","extend","receiver","key","emitter","emitters","arguments","n","length","i","keydownHandler","event","tag","tags","hiddenValue","this","hiddenInput","keyCode","preventDefault","ensureMaxLength","originalInput","currentTags","addTag","tagContainer","removeTag","clickTagHandler","target","parentNode","focus","createElements","field","options","patterns","regex","tooltipTitle","maxLength","maxTags","name","getAttribute","setAttribute","appendChild","insertBefore","addListeners","addEventListener","bind","updateInstance","dummy","dummyValues","forEach","tagName","removeAttribute","Tagdog","events","cleanTagName","reduce","pattern","replace","createTagElement","unsafe","tagElement","hasTag","textContent","insertTagElement","duplicates","isMaxTags","emit","type","srcName","srcElement","getTags","timestamp","Date","now","addTags","map","elem","apply","removeTagByName","tagElem","splice","removeChild","removed","removeTagByElement","asString","toLower","resetTags","innerHTML","String","toLowerCase","substring","createTag","on","eventName","callback","off","once","self","selfDeleting","eventData","hasEvents","extendTagdog","protoProps","staticProps","Extended","constructor","tagdog","elements","inst"],"mappings":"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","file":"tagdog.min.js","sourcesContent":["(function() {\n\n\t'use strict';\n\n\t/*\n\t * Private variables.\n\t **/\n\n\tvar counter = 0;\n\n\tvar eventType = window.ontouchend ? 'touchend' : 'click';\n\n\tvar keyCodes = {\n\t\t8: 'backspace',\n\t\t13: 'enter',\n\t\t188: ','\n\t};\n\n\n\t/*\n\t * Mostly private shortcuts and helper functions.\n\t **/\n\n\tvar slice = Array.prototype.slice;\n\n\tvar toString = Object.prototype.toString;\n\n\tvar typeError = function error(message) {\n\t\tthrow new TypeError(message);\n\t};\n\n\tvar getType = function getType(obj) {\n\t\treturn toString.call(obj).slice(8, -1);\n\t};\n\n\tvar isString = function isString(obj) {\n\t\treturn getType(obj) === 'String';\n\t};\n\n\tvar isHTMLElement = function isHTMLElement(obj) {\n\t\treturn obj instanceof HTMLElement;\n\t};\n\n\tvar isNodeList = function isNodeList(obj) {\n\t\treturn getType(obj) === 'NodeList';\n\t};\n\n\tvar isArray = function isArray(obj) {\n\t\treturn getType(obj) === 'Array';\n\t};\n\n\tvar isObject = function isObject(obj) {\n\t\treturn getType(obj) === 'Object';\n\t};\n\n\tvar toArray = function toArray(obj) {\n\t\treturn slice.call(obj);\n\t};\n\n\tvar arrayContains = function arrayContains(array, value) {\n\t\treturn array.indexOf(value) > -1;\n\t};\n\n\tvar qs = function qs(selector, element) {\n\t\treturn (element || document).querySelector(selector);\n\t};\n\n\tvar qsa = function qsa(selector, element) {\n\t\treturn (element || document).querySelectorAll(selector);\n\t};\n\t\n\tvar addClass = function addClass(element, className) {\n\t\tvar classes = element.className.split(/\\s+/);\n\t\tif(classes.indexOf(className) === -1) {\n\t\t\tclasses.push(className);\n\t\t}\n\t\t\n\t\telement.className = classes.join(' ');\n\t};\n\t\n\tvar bla = document.createElement('p');\n\tconsole.log('className', bla.className === \"\");\n\n\t// A basic extend function always helps making things easier.\n\tvar extend = function extend(receiver /*, emitters */) {\n\t\tvar emitters = slice.call(arguments, 1),\n\t\t\t\tn = emitters.length,\n\t\t\t\ti = 0,\n\t\t\t\tkey, emitter;\n\n\t\tif(!n) return receiver;\n\n\t\tfor( ; i < n; i++ ) {\n\t\t\temitter = emitters[i];\n\t\t\tfor(key in emitter) {\n\t\t\t\treceiver[key] = emitter[key];\n\t\t\t}\n\t\t}\n\n\t\treturn receiver;\n\t};\n\n\n\t/**\n\t * Event Handlers.\n\t */\n\n\tvar keydownHandler = function keydownHandler(event) {\n\t\tvar hiddenValue = this.hiddenInput.value,\n\t\t\t\tkeyCode = keyCodes[event.keyCode],\n\t\t\t\ttag, tags;\n\n\t\tif(keyCode === 'enter' || keyCode === ',') {\n\t\t\tevent.preventDefault();\n\n\t\t\ttag = this.ensureMaxLength(this.originalInput.value);\n\n\t\t\tif(tag.length <= 0) return false;\n\n\t\t\tif(!arrayContains(this.currentTags, tag)) {\n\t\t\t\tthis.addTag(tag);\n\t\t\t}\n\t\t}\n\n\t\tif(keyCode === 'backspace' && hiddenValue.length > 0) {\n\t\t\tif(this.originalInput.value.length > 0) return false;\n\t\t\ttags = qsa('.tagdog-tag', this.tagContainer);\n\t\t\tthis.removeTag(tags[tags.length - 1]);\n\t\t}\n\t};\n\n\tvar preventDefault = function preventDefault(event) {\n\t\tevent.preventDefault();\n\t};\n\n\tvar clickTagHandler = function clickTagHandler(event) {\n\t\tvar target = event.target;\n\n\t\twhile(target.className !== 'tagdog-tag') {\n\t\t\tif(target === this.tagContainer) return;\n\t\t\ttarget = target.parentNode;\n\t\t}\n\n\t\tthis.removeTag(target);\n\n\t\t// Refocussing makes for a nicer mobile experience.\n\t\tthis.originalInput.focus();\n\t};\n\n\n\t/**\n\t * Private setup functions. Avoid polluting the instance API with\n\t * setup functions that should be called only once. rather call the\n\t * functions from within the constructor.\n\t */\n\n\t// Creates all the needed elements for each instance\n\tvar createElements = function createElements(field, options) {\n\n\t\tthis.options = extend({\n\t\t\t// Default replacement patterns\n\t\t\tpatterns: [{\n\t\t\t\t// Replace all leading and trailing white-space with the empty String.\n\t\t\t\tregex: /^\\s+|\\s+$/g\n\t\t\t}, {\n\t\t\t\t// Replace everything that does not match this pattern with the empty String.\n\t\t\t\tregex: /[^a-z0-9 -]+/gi\n\t\t\t}],\n\t\t\ttooltipTitle: \"Click to delete\",\n\t\t\tmaxLength: 255,\n\t\t\tmaxTags: 12\n\t\t}, options);\n\n\t\t// Assign the Tagdog element and add the actual tagdog CSS class, if not already defined.\n\t\tthis.field = isHTMLElement(field) ? field : qs(field);\n\t\t// this.field.classList.add('tagdog-field');\n\t\taddClass(this.field, 'tagdog-field');\n\n\t\t// This is where the tags are saved.\n\t\tthis.currentTags = [];\n\n\t\t// originalInput is the provided input field used to enter the tags.\n\t\tthis.originalInput = qs('input', this.field);\n\t\tthis.name = this.originalInput.getAttribute('name') || 'tagdog_' + (++counter);\n\n\t\t// The hidden input field is the actual input field. It receives the name attribute of the dummy input field.\n\t\tthis.hiddenInput = document.createElement('input');\n\t\tthis.hiddenInput.setAttribute('type', 'hidden');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('name', this.name);\n\n\t\t// This new element contains the visual tags (tag nodes).\n\t\tthis.tagContainer = document.createElement('div');\n\t\tthis.tagContainer.setAttribute('aria-hidden', true);\n\t\tthis.tagContainer.className = 'tagdog-container';\n\n\t\t// Append the new elements.\n\t\tthis.field.appendChild(this.hiddenInput);\n\t\tthis.field.insertBefore(this.tagContainer, this.originalInput);\n\t};\n\n\n\t// Attach all the needed event listeners.\n\tvar addListeners = function addListeners() {\n\t\t// TODO: Implement proper plain text pasting.\n\t\tthis.field.addEventListener('paste', preventDefault, false);\n\n\t\t// Make the dummy input field listen for keystrokes.\n\t\tthis.originalInput.addEventListener('keydown', keydownHandler.bind(this), false);\n\n\t\t// Delegate click/touchend events to the tag Elements.\n\t\tthis.tagContainer.addEventListener(eventType, clickTagHandler.bind(this), false);\n\t};\n\n\n\t// Updates Tagdog instances in case there are predefined tags.\n\tvar updateInstance = function updateInstance() {\n\t\tvar dummy = this.originalInput,\n\t\t\t\tdummyValues = dummy.getAttribute('value'),\n\t\t\t\tmaxTags = this.options.maxTags;\n\n\t\tif(!dummyValues) return;\n\n\t\tdummyValues.split(/,\\s*/, maxTags).forEach(function addTags(tagName) {\n\t\t\ttagName = this.ensureMaxLength(tagName);\n\t\t\tthis.addTag(tagName);\n\t\t}, this);\n\n\t\t// We don't need the name attribute.\n\t\tdummy.removeAttribute('name');\n\t};\n\n\n\t/**\n\t * Tagdog constructor.\n\t */\n\tvar Tagdog = function Tagdog(field, options) {\n\t\tif( !(this instanceof Tagdog) ) {\n\t\t\treturn new Tagdog(field, options);\n\t\t}\n\n\t\tthis.events = {};\n\n\t\tcreateElements.call(this, field, options);\n\t\taddListeners.call(this);\n\t\tupdateInstance.call(this);\n\t};\n\n\n\t/**\n\t * Tagdog prototype functions.\n\t */\n\n\t// Cleans tag names of unwanted characters.\n\tTagdog.prototype.cleanTagName = function cleanTagName(tagName) {\n\n\t\ttagName = this.ensureMaxLength(tagName);\n\n\t\treturn this.options.patterns.reduce(function replacer(tagName, pattern) {\n\t\t\treturn tagName.replace(pattern.regex, pattern.replace || '');\n\t\t}, tagName);\n\t};\n\n\n\t// Creates and returns new tag element.\n\tTagdog.prototype.createTagElement = function createTagElement(tagName, unsafe) {\n\t\tvar tagElement;\n\n\t\tif(this.hasTag(tagName)) return null;\n\n\t\ttagElement = document.createElement('span');\n\t\ttagElement.textContent = unsafe ? tagName : this.cleanTagName(tagName);\n\t\ttagElement.setAttribute('aria-hidden', true);\n\t\ttagElement.setAttribute('role', 'button');\n\t\ttagElement.setAttribute('data-title', this.options.tooltipTitle);\n\t\ttagElement.className = \"tagdog-tag\";\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag element to the current Tagdog instance.\n\tTagdog.prototype.insertTagElement = function insertTagElement(tagElement, duplicates) {\n\t\tvar tagName;\n\n\t\tif(!duplicates && this.hasTag(tagElement.textContent)) return null;\n\t\tif(this.isMaxTags()) return null;\n\n\t\t// tagElement.classList.add('tagdog-tag');\n\t\taddClass(tagElement, 'tagdog-tag');\n\n\t\ttagName = tagElement.textContent;\n\n\t\tthis.currentTags.push(tagName);\n\t\tthis.tagContainer.appendChild(tagElement);\n\t\tthis.hiddenInput.value = this.currentTags.join(',');\n\t\tthis.originalInput.value = '';\n\n\t\tthis.emit('taginserted', {\n\t\t\ttype: 'taginserted',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\tcurrentTags: this.getTags(),\n\t\t\ttagElement: tagElement,\n\t\t\ttagName: tagName,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag to the current Tagdog instance.\n\tTagdog.prototype.addTag = function addTag(tag) {\n\t\tvar tagElement = isHTMLElement(tag) ? tag : this.createTagElement(tag);\n\t\treturn this.insertTagElement(tagElement);\n\t};\n\n\n\t// Adds multiple tags in the form of tag names, elements\n\t// or arrays that consist of tag names and elements and\n\t// returns all newly created tags.\n\tTagdog.prototype.addTags = function addTag(/* args */) {\n\t\tvar tags = slice.call(arguments);\n\n\t\treturn tags.map(function add(elem) {\n\t\t\treturn isArray(elem) ? this.addTags.apply(this, elem) : this.addTag(elem);\n\t\t}, this);\n\t};\n\n\n\t// Checks whether a tag already exists.\n\tTagdog.prototype.hasTag = function hasTag(tag) {\n\t\tvar tagName = isHTMLElement(tag) ? tag.textContent : tag;\n\t\ttagName = this.ensureMaxLength(tagName);\n\t\treturn arrayContains(this.currentTags, tagName);\n\t};\n\n\n\t// Removes a tag based on its title (tag name).\n\tTagdog.prototype.removeTagByName = function removeTagByName(tagName) {\n\t\tvar tags = toArray(qsa('.tagdog-tag', this.tagContainer)),\n\t\t\t\tn = tags.length,\n\t\t\t\ttagElem, tag;\n\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagName), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\n\t\twhile(n > 0) {\n\t\t\ttagElem = tags[--n];\n\t\t\tif(tagElem.textContent === tag) {\n\t\t\t\ttag = this.tagContainer.removeChild(tagElem);\n\n\t\t\t\tthis.emit('tagremoved', {\n\t\t\t\t\ttype: 'tagremoved',\n\t\t\t\t\tsrcName: this.name,\n\t\t\t\t\tsrcElement: this.field,\n\t\t\t\t\tcurrentTags: this.getTags(),\n\t\t\t\t\ttagElement: tag,\n\t\t\t\t\ttagName: tag.textContent,\n\t\t\ttimestamp: Date.now()\n\t\t\t\t});\n\n\t\t\t\treturn removed;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\n\t//Removes a tag element.\n\tTagdog.prototype.removeTagByElement = function removeTagByElement(tagElement) {\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagElement.textContent), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\t\tvar tag = this.tagContainer.removeChild(tagElement);\n\n\t\tthis.emit('tagremoved', {\n\t\t\ttype: 'tagremoved',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\tcurrentTags: this.getTags(),\n\t\t\ttagElement: tag,\n\t\t\ttagName: tag.textContent,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\n\t\treturn tag;\n\t};\n\n\n\t// Removes a tag and returns it.\n\tTagdog.prototype.removeTag = function removeTag(tag) {\n\t\treturn (typeof tag === 'string') ? this.removeTagByName(tag) : this.removeTagByElement(tag);\n\t};\n\n\n\t// Returns an Array with all current tag names.\n\tTagdog.prototype.getTags = function getTags(asString) {\n\t\treturn !asString ? this.currentTags : this.toLower(this.currentTags);\n\t};\n\n\n\t// Resets the Tagdog instance.\n\tTagdog.prototype.resetTags = function reset() {\n\t\tthis.originalInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.tagContainer.innerHTML = \"\";\n\t\tthis.currentTags.splice(0, this.currentTags.length);\n\n\t\tthis.emit('fieldreset', {\n\t\t\ttype: 'fieldreset',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\t};\n\n\n\t// Returns `true`, if the maxTags limit is reached, `false` otherwise.\n\tTagdog.prototype.isMaxTags = function isMaxTags() {\n\t\treturn this.getTags().length >= this.options.maxTags;\n\t};\n\n\n\t// Converts a value to a String first and then to lower case, so we can\n\t// simply convert the whole currentTags Array to a lower case String.\n\tTagdog.prototype.toLower = function toLower(value) {\n\t\tif(!isString(value) && !isArray(value)) return '';\n\t\treturn String(value).toLowerCase();\n\t};\n\n\n\t// Makes sure a tagName is no longer than options.maxLength\n\tTagdog.prototype.ensureMaxLength = function ensureMaxLength(tagName) {\n\t\tvar maxLength = this.options.maxLength;\n\t\treturn tagName >= maxLength ? tagName : tagName.substring(0, maxLength);\n\t};\n\n\t// Checks, whether the provided value is an HTMLElement.\n\tTagdog.prototype.isHTMLElement = isHTMLElement;\n\n\n\t// Checks, whether the provided value is a NodeList.\n\tTagdog.prototype.isNodeList = isNodeList;\n\n\n\t// Alias of Tagdog#createTagElement. Already deprecated, will be removed in later versions.\n\tTagdog.prototype.createTag = Tagdog.prototype.createTagElement;\n\n\n\t/*\n\t * Events\n\t **/\n\n\tTagdog.prototype.on = function on(eventName, callback) {\n\t\tvar events = this.events;\n\n\t\tevents[eventName] = events[eventName] || [];\n\t\tevents[eventName].push(callback);\n\t};\n\n\tTagdog.prototype.off = function off(eventName, callback) {\n\t\tvar events = this.events, i, n;\n\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tif(events[eventName][i] === callback) {\n\t\t\t\t\tevents[eventName].splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tTagdog.prototype.once = function once(eventName, callback) {\n\t\tvar self = this,\n\t\t    events = this.events;\n\n\t\tvar selfDeleting = function selfDeleting(event) {\n\t\t\tcallback(event);\n\t\t\tself.off(eventName, selfDeleting);\n\t\t};\n\n\t\tthis.on(eventName, selfDeleting);\n\t};\n\n\tTagdog.prototype.emit = function emit(eventName, eventData) {\n\t\tvar events = this.events, callback, i, n;\n\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tcallback = events[eventName][i];\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(eventData || {});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tTagdog.prototype.hasEvents = function hasEvents() {\n\t\tvar events = this.events,\n\t\t\t\tkey;\n\n\t\tfor(key in events) if(events[key] && events[key].length) return true;\n\t\treturn false;\n\t};\n\n\n\t/*\n\t * With this function the Tagdog constructor is extensible.\n\t **/\n\tvar extendTagdog = function extendTagdog(protoProps, staticProps) {\n\t\tvar Extended = function Extended(field, options) {\n\t\t\tif( !(this instanceof Extended) ) {\n\t\t\t\treturn new Extended(field, options);\n\t\t\t}\n\n\t\t\tTagdog.apply(this, arguments);\n\n\t\t\tif(staticProps) extend(this, staticProps);\n\t\t};\n\n\t\tExtended.prototype = extend(Tagdog.prototype, protoProps);\n\t\tExtended.prototype.constructor = Tagdog.prototype.constructor;\n\n\t\treturn Extended;\n\t};\n\n\n\t/*\n\t * The namespace is a decorator function. You can provide either a\n\t * CSS selector, an HTMLElement, a NodeList or nothing. The return\n\t * value will either be a single Tagdog instance or an Object which\n\t * property names are the name attributes of the input fields inside\n\t * the respective selected elements. If no field param is provided\n\t * the function will simply return instances for all elements that\n\t * match the selector `.tagdog-field`. No matches will result in a\n\t * return value of `null`.\n\t **/\n\tthis.tagdog = function tagdog(field, options, protoProps, staticProps) {\n\n\t\t// If `field` is falsy, simply call tagdog again\n\t\t// recursively and pass the default Tagdog selector.\n\t\tif(!field) {\n\t\t\treturn tagdog('.tagdog-field', options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is an HTMLElelent, return a single instance.\n\t\tif(isHTMLElement(field)) {\n\t\t\treturn (protoProps || staticProps) ?\n\t\t\t\textendTagdog(protoProps, staticProps)(field, options) :\n\t\t\t\tnew Tagdog(field, options);\n\t\t}\n\n\t\t// If `field` is a String, it's assumed it's a CSS selector.\n\t\t// Try to match as many elements as possible. If there is no\n\t\t// match, return `null`. If there is one match call tagdog\n\t\t// recursively and pass the HTMLElement so that tagdog can\n\t\t// return a single instance. If there are two or more matches\n\t\t// do the same, but instead provide the whole NodeList.\n\t\tif(isString(field)) {\n\t\t\tvar elements = qsa(field),\n\t\t\t\t\tn = elements.length;\n\n\t\t\tif(!n) return null;\n\n\t\t\tfield = n > 1 ? elements : elements[0];\n\n\t\t\treturn tagdog(field, options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is a NodeList return an Object of Tagdog instances.\n\t\tif(isNodeList(field)) {\n\t\t\tfield = toArray(field);\n\t\t\treturn field.reduce(function(obj, element) {\n\t\t\t\tvar inst = tagdog(element, options, protoProps, staticProps);\n\t\t\t\tobj[inst.name] = inst;\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\t\t}\n\t};\n\n}).call(this);\n"],"sourceRoot":"/source/"}
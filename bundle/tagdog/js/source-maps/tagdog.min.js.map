{"version":3,"sources":["tagdog.js"],"names":["counter","eventType","window","ontouchend","keyCodes",8,13,188,"slice","Array","prototype","toString","Object","getType","obj","call","isString","isHTMLElement","HTMLElement","isNodeList","isArray","toArray","arrayContains","array","value","indexOf","qs","selector","element","document","querySelector","qsa","querySelectorAll","extend","receiver","key","emitter","emitters","arguments","n","length","i","keydownHandler","event","tag","tags","hiddenValue","this","hiddenInput","keyCode","preventDefault","ensureMaxLength","originalInput","currentTags","addTag","tagContainer","removeTag","clickTagHandler","target","className","parentNode","focus","triggerNativeEvent","name","createEvent","initEvent","dispatchEvent","fireEvent","createElements","field","options","patterns","regex","tooltipTitle","maxLength","maxTags","classList","add","getAttribute","createElement","setAttribute","appendChild","insertBefore","addListeners","addEventListener","bind","updateInstance","dummy","dummyValues","split","forEach","tagName","removeAttribute","Tagdog","events","cleanTagName","reduce","pattern","replace","createTagElement","unsafe","tagElement","hasTag","textContent","insertTagElement","duplicates","isMaxTags","push","join","emit","srcElement","removeTagByName","tagElem","splice","removeChild","removed","removeTagByElement","getTags","asString","toLower","resetTags","innerHTML","String","toLowerCase","substring","createTag","on","eventName","callback","off","once","self","selfDeleting","eventData","extendTagdog","protoProps","staticProps","Extended","apply","constructor","tagdog","elements","inst"],"mappings":"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","file":"tagdog.min.js","sourcesContent":["(function() {\n\t\n\t'use strict';\n\n\t/*\n\t * Private variables.\n\t **/\n\n\tvar counter = 0;\n\n\tvar eventType = window.ontouchend ? 'touchend' : 'click';\n\n\tvar keyCodes = {\n\t\t8: 'backspace',\n\t\t13: 'enter',\n\t\t188: ','\n\t};\n\n\n\t/*\n\t * Mostly private shortcuts and helper functions.\n\t **/\n\n\tvar slice = Array.prototype.slice;\n\n\tvar toString = Object.prototype.toString;\n\n\tvar typeError = function error(message) {\n\t\tthrow new TypeError(message);\n\t};\n\n\tvar getType = function getType(obj) {\n\t\treturn toString.call(obj).slice(8, -1);\n\t};\n\n\tvar isString = function isString(obj) {\n\t\treturn getType(obj) === 'String';\n\t};\n\n\tvar isHTMLElement = function isHTMLElement(obj) {\n\t\treturn obj instanceof HTMLElement;\n\t};\n\n\tvar isNodeList = function isNodeList(obj) {\n\t\treturn getType(obj) === 'NodeList';\n\t};\n\n\tvar isArray = function isArray(obj) {\n\t\treturn getType(obj) === 'Array';\n\t};\n\n\tvar isObject = function isObject(obj) {\n\t\treturn getType(obj) === 'Object';\n\t};\n\n\tvar toArray = function toArray(obj) {\n\t\treturn slice.call(obj);\n\t};\n\n\tvar arrayContains = function arrayContains(array, value) {\n\t\treturn array.indexOf(value) > -1;\n\t};\n\n\tvar qs = function qs(selector, element) {\n\t\treturn (element || document).querySelector(selector);\n\t};\n\n\tvar qsa = function qsa(selector, element) {\n\t\treturn (element || document).querySelectorAll(selector);\n\t};\n\n\t// A basic extend function always helps making things easier.\n\tvar extend = function extend(receiver /*, emitters */) {\n\t\tvar emitters = slice.call(arguments, 1),\n\t\t\t\tn = emitters.length,\n\t\t\t\ti = 0,\n\t\t\t\tkey, emitter;\n\n\t\tif(!n) return receiver;\n\n\t\tfor( ; i < n; i++ ) {\n\t\t\temitter = emitters[i];\n\t\t\tfor(key in emitter) {\n\t\t\t\treceiver[key] = emitter[key];\n\t\t\t}\n\t\t}\n\n\t\treturn receiver;\n\t};\n\n\n\t/**\n\t * Event Handlers.\n\t */\n\n\tvar keydownHandler = function keydownHandler(event) {\n\t\tvar hiddenValue = this.hiddenInput.value,\n\t\t\t\tkeyCode = keyCodes[event.keyCode],\n\t\t\t\ttag, tags;\n\n\t\tif(keyCode === 'enter' || keyCode === ',') {\n\t\t\tevent.preventDefault();\n\n\t\t\ttag = this.ensureMaxLength(this.originalInput.value);\n\n\t\t\tif(tag.length <= 0) return false;\n\n\t\t\tif(!arrayContains(this.currentTags, tag)) {\n\t\t\t\tthis.addTag(tag);\n\t\t\t}\n\t\t}\n\n\t\tif(keyCode === 'backspace' && hiddenValue.length > 0) {\n\t\t\tif(this.originalInput.value.length > 0) return false;\n\t\t\ttags = qsa('.tagdog-tag', this.tagContainer);\n\t\t\tthis.removeTag(tags[tags.length - 1]);\n\t\t}\n\t};\n\n\tvar preventDefault = function preventDefault(event) {\n\t\tevent.preventDefault();\n\t};\n\n\tvar clickTagHandler = function clickTagHandler(event) {\n\t\tvar target = event.target;\n\n\t\twhile(target.className !== 'tagdog-tag') {\n\t\t\tif(target === this.tagContainer) return;\n\t\t\ttarget = target.parentNode;\n\t\t}\n\n\t\tthis.removeTag(target);\n\n\t\t// Refocussing makes for a nicer mobile experience.\n\t\tthis.originalInput.focus();\n\t};\n\n\tvar triggerNativeEvent = function triggerNativeEvent(element, name) {\n\t\tif (document.createEvent) {\n\t\t\tvar event = document.createEvent('HTMLEvents');\n\t\t\tevent.initEvent(name, true, false);\n\t\t\telement.dispatchEvent(event);\n\t\t} else {\n\t\t\telement.fireEvent(name);\n\t\t}\n\t};\n\n\n\t/**\n\t * Private setup functions. Avoid polluting the instance API with\n\t * setup functions that should be called only once. rather call the\n\t * functions from within the constructor.\n\t */\n\n\t// Creates all the needed elements for each instance\n\tvar createElements = function createElements(field, options) {\n\n\t\tthis.options = extend({\n\t\t\t// Default replacement patterns\n\t\t\tpatterns: [{\n\t\t\t\t// Replace all leading and trailing white-space with the empty String.\n\t\t\t\tregex: /^\\s+|\\s+$/g\n\t\t\t}, {\n\t\t\t\t// Replace everything that does not match this pattern with the empty String.\n\t\t\t\tregex: /[^a-z0-9 -]+/gi\n\t\t\t}],\n\t\t\ttooltipTitle: \"Click to delete\",\n\t\t\tmaxLength: 255,\n\t\t\tmaxTags: 12\n\t\t}, options);\n\n\t\t// Assign the Tagdog element and add the actual tagdog CSS class, if not already defined.\n\t\tthis.field = isHTMLElement(field) ? field : qs(field);\n\t\tthis.field.classList.add('tagdog-field');\n\n\t\t// This is where the tags are saved.\n\t\tthis.currentTags = [];\n\n\t\t// originalInput is the provided input field used to enter the tags.\n\t\tthis.originalInput = qs('input', this.field);\n\t\tthis.name = this.originalInput.getAttribute('name') || 'tagdog_' + (++counter);\n\n\t\t// The hidden input field is the actual input field. It receives the name attribute of the dummy input field.\n\t\tthis.hiddenInput = document.createElement('input');\n\t\tthis.hiddenInput.setAttribute('type', 'hidden');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('name', this.name);\n\n\t\t// This new element contains the visual tags (tag nodes).\n\t\tthis.tagContainer = document.createElement('div');\n\t\tthis.tagContainer.setAttribute('aria-hidden', true);\n\t\tthis.tagContainer.className = 'tagdog-container';\n\n\t\t// Append the new elements.\n\t\tthis.field.appendChild(this.hiddenInput);\n\t\tthis.field.insertBefore(this.tagContainer, this.originalInput);\n\t};\n\n\n\t// Attach all the needed event listeners.\n\tvar addListeners = function addListeners() {\n\t\t// TODO: Implement proper plain text pasting.\n\t\tthis.field.addEventListener('paste', preventDefault, false);\n\n\t\t// Make the dummy input field listen for keystrokes.\n\t\tthis.originalInput.addEventListener('keydown', keydownHandler.bind(this), false);\n\n\t\t// Delegate click/touchend events to the tag Elements.\n\t\tthis.tagContainer.addEventListener(eventType, clickTagHandler.bind(this), false);\n\t};\n\n\n\t// Updates Tagdog instances in case there are predefined tags.\n\tvar updateInstance = function updateInstance() {\n\t\tvar dummy = this.originalInput,\n\t\t\t\tdummyValues = dummy.getAttribute('value');\n\t\t\t\t\n\t\tif(!dummyValues) return;\n\n\t\tdummyValues.split(',').forEach(function addTags(tagName) {\n\t\t\ttagName = this.ensureMaxLength(tagName);\n\t\t\tthis.addTag(tagName);\n\t\t}, this);\n\n\t\t// We don't need the name attribute.\n\t\tdummy.removeAttribute('name');\n\t};\n\n\n\t/**\n\t * Tagdog constructor.\n\t */\n\tvar Tagdog = function Tagdog(field, options) {\n\t\tif( !(this instanceof Tagdog) ) {\n\t\t\treturn new Tagdog(field, options);\n\t\t}\n\t\t\n\t\tthis.events = {};\n\n\t\tcreateElements.call(this, field, options);\n\t\taddListeners.call(this);\n\t\tupdateInstance.call(this);\n\t};\n\n\n\t/**\n\t * Tagdog prototype functions.\n\t */\n\n\t// Cleans tag names of unwanted characters.\n\tTagdog.prototype.cleanTagName = function cleanTagName(tagName) {\n\t\t\n\t\ttagName = this.ensureMaxLength(tagName);\n\t\t\n\t\treturn this.options.patterns.reduce(function replacer(tagName, pattern) {\n\t\t\treturn tagName.replace(pattern.regex, pattern.replace || '');\n\t\t}, tagName);\n\t};\n\n\n\t// Creates and returns new tag element.\n\tTagdog.prototype.createTagElement = function createTagElement(tagName, unsafe) {\n\t\tvar tagElement;\n\t\t\t\t\n\t\tif(this.hasTag(tagName)) return null;\n\t\t\n\t\ttagElement = document.createElement('span');\n\t\ttagElement.textContent = unsafe ? tagName : this.cleanTagName(tagName);\n\t\ttagElement.setAttribute('aria-hidden', true);\n\t\ttagElement.setAttribute('role', 'button');\n\t\ttagElement.setAttribute('data-title', this.options.tooltipTitle);\n\t\ttagElement.className = \"tagdog-tag\";\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag element to the current Tagdog instance.\n\tTagdog.prototype.insertTagElement = function insertTagElement(tagElement, duplicates) {\n\t\tvar tagName;\n\t\t\n\t\tif(!duplicates && this.hasTag(tagElement.textContent)) return null;\n\t\tif(this.isMaxTags()) return null;\n\n\t\ttagElement.classList.add('tagdog-tag');\n\t\t\n\t\ttagName = tagElement.textContent;\n\n\t\tthis.currentTags.push(tagName);\n\t\tthis.tagContainer.appendChild(tagElement);\n\t\tthis.hiddenInput.value = this.currentTags.join(',');\n\t\tthis.originalInput.value = '';\n\n\t\tthis.emit('taginserted', {\n\t\t\teventType: 'taginserted',\n\t\t\tsrcElement: this.element,\n\t\t\ttagElement: tagElement,\n\t\t\ttagName: tagName\n\t\t});\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag to the current Tagdog instance.\n\tTagdog.prototype.addTag = function addTag(tag) {\n\t\tvar tagElement = isHTMLElement(tag) ? tag : this.createTagElement(tag);\n\t\treturn this.insertTagElement(tagElement);\n\t};\n\t\n\n\t// Checks whether a tag already exists.\n\tTagdog.prototype.hasTag = function hasTag(tag) {\n\t\tvar tagName = isHTMLElement(tag) ? tag.textContent : tag;\n\t\ttagName = this.ensureMaxLength(tagName);\n\t\treturn arrayContains(this.currentTags, tagName);\n\t};\n\n\n\t// Removes a tag based on its title (tag name).\n\tTagdog.prototype.removeTagByName = function removeTagByName(tagName) {\n\t\tvar tags = toArray(qsa('.tagdog-tag', this.tagContainer)),\n\t\t\t\tn = tags.length,\n\t\t\t\ttagElem, tag;\n\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagName), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\n\t\twhile(n > 0) {\n\t\t\ttagElem = tags[--n];\n\t\t\tif(tagElem.textContent === tag) {\n\t\t\t\ttag = this.tagContainer.removeChild(tagElem);\n\n\t\t\t\ttriggerNativeEvent(this.field, 'change');\n\n\t\t\t\treturn removed;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\n\t//Removes a tag element.\n\tTagdog.prototype.removeTagByElement = function removeTagByElement(tagElement) {\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagElement.textContent), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\t\tvar tag = this.tagContainer.removeChild(tagElement);\n\n\t\ttriggerNativeEvent(this.field, 'change');\n\n\t\treturn tag;\n\t};\n\n\n\t// Removes a tag and returns it.\n\tTagdog.prototype.removeTag = function removeTag(tag) {\n\t\treturn (typeof tag === 'string') ? this.removeTagByName(tag) : this.removeTagByElement(tag);\n\t};\n\n\n\t// Returns an Array with all current tag names.\n\tTagdog.prototype.getTags = function getTags(asString) {\n\t\treturn !asString ? this.currentTags : this.toLower(this.currentTags);\n\t};\n\n\n\t// Resets the Tagdog instance.\n\tTagdog.prototype.resetTags = function reset() {\n\t\tthis.originalInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.tagContainer.innerHTML = \"\";\n\t\tthis.currentTags.splice(0, this.currentTags.length);\n\n\t\ttriggerNativeEvent(this.field, 'change');\n\t};\n\n\n\t// Returns `true`, if the maxTags limit is reached, `false` otherwise.\n\tTagdog.prototype.isMaxTags = function isMaxTags() {\n\t\treturn this.getTags().length >= this.options.maxTags;\n\t};\n\n\n\t// Converts a value to a String first and then to lower case, so we can\n\t// simply convert the whole currentTags Array to a lower case String.\n\tTagdog.prototype.toLower = function toLower(value) {\n\t\tif(!isString(value) && !isArray(value)) return '';\n\t\treturn String(value).toLowerCase();\n\t};\n\n\n\t// Makes sure a tagName is no longer than options.maxLength\n\tTagdog.prototype.ensureMaxLength = function ensureMaxLength(tagName) {\n\t\tvar maxLength = this.options.maxLength;\n\t\treturn tagName >= maxLength ? tagName : tagName.substring(0, maxLength);\n\t};\n\n\t// Checks, whether the provided value is an HTMLElement.\n\tTagdog.prototype.isHTMLElement = isHTMLElement;\n\n\n\t// Checks, whether the provided value is a NodeList.\n\tTagdog.prototype.isNodeList = isNodeList;\n\t\n\n\t// Alias of Tagdog#createTagElement. Already deprecated, will be removed in later versions.\n\tTagdog.prototype.createTag = Tagdog.prototype.createTagElement;\n\t\n\t\n\t/*\n\t * Events\n\t **/\n\t\n\tTagdog.prototype.on = function on(eventName, callback) {\n\t\tvar events = this.events;\n\t\n\t\tevents[eventName] = events[eventName] || [];\n\t\tevents[eventName].push(callback);\n\t};\n\t\n\tTagdog.prototype.off = function off(eventName, callback) {\n\t\tvar events = this.events, i, n;\n\t\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tif(events[eventName][i] === callback) {\n\t\t\t\t\tevents[eventName].splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\tTagdog.prototype.once = function once(eventName, callback) {\n\t\tvar self = this,\n\t\t    events = this.events;\n\t\n\t\tvar selfDeleting = function selfDeleting(event) {\n\t\t\tcallback(event);\n\t\t\tself.off(eventName, selfDeleting);\n\t\t};\n\t\n\t\tthis.on(eventName, selfDeleting);\n\t};\n\n\tTagdog.prototype.emit = function emit(eventName, eventData) {\n\t\tvar events = this.events, callback, i, n;\n\t\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tcallback = events[eventName][i];\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(eventData || {});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/*\n\t * With this function the Tagdog constructor is extensible.\n\t **/\n\tvar extendTagdog = function extendTagdog(protoProps, staticProps) {\n\t\tvar Extended = function Extended(field, options) {\n\t\t\tif( !(this instanceof Extended) ) {\n\t\t\t\treturn new Extended(field, options);\n\t\t\t}\n\n\t\t\tTagdog.apply(this, arguments);\n\n\t\t\tif(staticProps) extend(this, staticProps);\n\t\t};\n\n\t\tExtended.prototype = extend(Tagdog.prototype, protoProps);\n\t\tExtended.prototype.constructor = Tagdog.prototype.constructor;\n\n\t\treturn Extended;\n\t};\n\n\n\t/*\n\t * The namespace is a decorator function. You can provide either a\n\t * CSS selector, an HTMLElement, a NodeList or nothing. The return\n\t * value will either be a single Tagdog instance or an Object which\n\t * property names are the name attributes of the input fields inside\n\t * the respective selected elements. If no field param is provided\n\t * the function will simply return instances for all elements that\n\t * match the selector `.tagdog-field`. No matches will result in a\n\t * return value of `null`.\n\t **/\n\tthis.tagdog = function tagdog(field, options, protoProps, staticProps) {\n\n\t\t// If `field` is falsy, simply call tagdog again\n\t\t// recursively and pass the default Tagdog selector.\n\t\tif(!field) {\n\t\t\treturn tagdog('.tagdog-field', options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is an HTMLElelent, return a single instance.\n\t\tif(isHTMLElement(field)) {\n\t\t\treturn (protoProps || staticProps) ?\n\t\t\t\textendTagdog(protoProps, staticProps)(field, options) :\n\t\t\t\tnew Tagdog(field, options);\n\t\t}\n\n\t\t// If `field` is a String, it's assumed it's a CSS selector.\n\t\t// Try to match as many elements as possible. If there is no\n\t\t// match, return `null`. If there is one match call tagdog\n\t\t// recursively and pass the HTMLElement so that tagdog can\n\t\t// return a single instance. If there are two or more matches\n\t\t// do the same, but instead provide the whole NodeList.\n\t\tif(isString(field)) {\n\t\t\tvar elements = qsa(field),\n\t\t\t\t\tn = elements.length;\n\n\t\t\tif(!n) return null;\n\n\t\t\tfield = n > 1 ? elements : elements[0];\n\n\t\t\treturn tagdog(field, options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is a NodeList return an Object of Tagdog instances.\n\t\tif(isNodeList(field)) {\n\t\t\tfield = toArray(field);\n\t\t\treturn field.reduce(function(obj, element) {\n\t\t\t\tvar inst = tagdog(element, options, protoProps, staticProps);\n\t\t\t\tobj[inst.name] = inst;\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\t\t}\n\t};\n\n}).call(this);\n"],"sourceRoot":"/source/"}
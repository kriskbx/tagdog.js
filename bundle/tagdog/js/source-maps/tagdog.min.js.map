{"version":3,"sources":["tagdog.js"],"names":["counter","eventType","window","ontouchend","keyCodes",8,13,188,"slice","Array","prototype","toString","Object","getType","obj","call","isString","isHTMLElement","HTMLElement","isNodeList","isArray","toArray","arrayContains","array","value","indexOf","qs","selector","element","document","querySelector","qsa","querySelectorAll","extend","receiver","i","key","emitter","emitters","arguments","n","length","keydownHandler","event","tag","tags","hiddenValue","this","hiddenInput","keyCode","preventDefault","cleanTagName","originalInput","ensureMaxlength","currentTags","addTag","tagContainer","removeTag","clickTagHandler","target","className","parentNode","focus","createElements","field","options","patterns","regex","tooltipTitle","maxLength","maxTags","classList","add","name","getAttribute","createElement","setAttribute","appendChild","insertBefore","addListeners","addEventListener","bind","updateInstance","dummy","dummyValues","split","forEach","tagName","removeAttribute","Tagdog","reduce","pattern","replace","hasTag","textContent","createTag","unsafe","title","tagNode","insertTagElement","duplicates","push","join","trim","removeTagByName","tagElem","splice","removeChild","removed","removeTagByElement","tagElement","getTags","asString","toLower","resetTags","innerHTML","String","toLowerCase","substring","extendTagdog","protoProps","staticProps","Extended","apply","constructor","tagdog","elements","inst"],"mappings":"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","file":"tagdog.min.js","sourcesContent":["(function() {\n\t\n\t'use strict';\n\n\t/*\n\t * Private variables.\n\t **/\n\n\tvar counter = 0;\n\n\tvar eventType = window.ontouchend ? 'touchend' : 'click';\n\n\tvar keyCodes = {\n\t\t8: 'backspace',\n\t\t13: 'enter',\n\t\t188: ','\n\t};\n\n\n\t/*\n\t * Mostly private shortcuts and helper functions.\n\t **/\n\n\tvar slice = Array.prototype.slice;\n\n\tvar toString = Object.prototype.toString;\n\n\tvar typeError = function error(message) {\n\t\tthrow new TypeError(message);\n\t};\n\n\tvar getType = function getType(obj) {\n\t\treturn toString.call(obj).slice(8, -1);\n\t};\n\n\tvar isString = function isString(obj) {\n\t\treturn getType(obj) === 'String';\n\t};\n\n\tvar isHTMLElement = function isHTMLElement(obj) {\n\t\treturn obj instanceof HTMLElement;\n\t};\n\n\tvar isNodeList = function isNodeList(obj) {\n\t\treturn getType(obj) === 'NodeList';\n\t};\n\n\tvar isArray = function isArray(obj) {\n\t\treturn getType(obj) === 'Array';\n\t};\n\n\tvar isObject = function isObject(obj) {\n\t\treturn getType(obj) === 'Object';\n\t};\n\n\tvar toArray = function toArray(obj) {\n\t\treturn slice.call(obj);\n\t};\n\n\tvar arrayContains = function arrayContains(array, value) {\n\t\treturn array.indexOf(value) > -1;\n\t};\n\n\tvar qs = function qs(selector, element) {\n\t\treturn (element || document).querySelector(selector);\n\t};\n\n\tvar qsa = function qsa(selector, element) {\n\t\treturn (element || document).querySelectorAll(selector);\n\t};\n\n\t// A basic extend function always helps making things easier.\n\tvar extend = function extend(receiver /*, emitters */) {\n\t\tvar emitters = slice.call(arguments, 1),\n\t\t\t\tn = emitters.length,\n\t\t\t\ti, key, emitter;\n\n\t\tif(!n) return receiver;\n\n\t\tfor(i = 0; i < n; i++) {\n\t\t\temitter = emitters[i];\n\t\t\tfor(key in emitter) {\n\t\t\t\treceiver[key] = emitter[key];\n\t\t\t}\n\t\t}\n\n\t\treturn receiver;\n\t};\n\n\n\t/**\n\t * Event Handlers.\n\t */\n\n\tvar keydownHandler = function keydownHandler(event) {\n\t\tvar hiddenValue = this.hiddenInput.value,\n\t\t\t\tkeyCode = keyCodes[event.keyCode],\n\t\t\t\ttag, tags;\n\n\t\tif(keyCode === 'enter' || keyCode === ',') {\n\t\t\tevent.preventDefault();\n\n\t\t\ttag = this.cleanTagName(this.originalInput.value);\n\t\t\ttag = this.ensureMaxlength(tag);\n\n\t\t\tif(tag.length <= 0) return false;\n\n\t\t\tif(!arrayContains(this.currentTags, tag)) {\n\t\t\t\tthis.addTag(tag);\n\t\t\t}\n\t\t}\n\n\t\tif(keyCode === 'backspace' && hiddenValue.length > 0) {\n\t\t\tif( this.originalInput.value.length > 0) return false;\n\t\t\ttags = qsa('.tagdog-tag', this.tagContainer);\n\t\t\tthis.removeTag(tags[tags.length - 1]);\n\t\t}\n\t};\n\n\tvar preventDefault = function preventDefault(event) {\n\t\tevent.preventDefault();\n\t};\n\n\tvar clickTagHandler = function clickTagHandler(event) {\n\t\tvar target = event.target;\n\n\t\twhile(target.className !== 'tagdog-tag') {\n\t\t\tif(target === this.tagContainer) return;\n\t\t\ttarget = target.parentNode;\n\t\t}\n\n\t\tthis.removeTag(target);\n\n\t\t// Refocussing makes for a nicer mobile experience.\n\t\tthis.originalInput.focus();\n\t};\n\n\n\t/**\n\t * Private setup functions. Avoid polluting the instance API with\n\t * setup functions that should be called only once. rather call the\n\t * functions from within the constructor.\n\t */\n\n\t// Creates all the needed elements for each instance\n\tvar createElements = function createElements(field, options) {\n\n\t\tthis.options = extend({\n\t\t\t// Default replacement patterns\n\t\t\tpatterns: [{\n\t\t\t\t// Replace all leading and trailing white-space with the empty String.\n\t\t\t\tregex: /^\\s+|\\s+$/g\n\t\t\t}, {\n\t\t\t\t// Replace everything that does not match this pattern with the empty String.\n\t\t\t\tregex: /[^a-z0-9 -]+/gi\n\t\t\t}],\n\t\t\ttooltipTitle: \"Click to delete\",\n\t\t\tmaxLength: 4,\n\t\t\tmaxTags: 20\n\t\t}, options);\n\n\t\t// Assign the Tagdog element and add the actual tagdog CSS class, if not already defined.\n\t\tthis.field = isHTMLElement(field) ? field : qs(field);\n\t\tthis.field.classList.add('tagdog-field');\n\n\t\t// This is where the tags are saved.\n\t\tthis.currentTags = [];\n\n\t\t// originalInput is the provided input field used to enter the tags.\n\t\tthis.originalInput = qs('input', this.field);\n\t\tthis.name = this.originalInput.getAttribute('name') || 'tagdog_' + (++counter);\n\n\t\t// The hidden input field is the actual input field. It receives the name attribute of the dummy input field.\n\t\tthis.hiddenInput = document.createElement('input');\n\t\tthis.hiddenInput.setAttribute('type', 'hidden');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('name', this.name);\n\n\t\t// This new element contains the visual tags (tag nodes).\n\t\tthis.tagContainer = document.createElement('div');\n\t\tthis.tagContainer.setAttribute('aria-hidden', true);\n\t\tthis.tagContainer.className = 'tagdog-container';\n\n\t\t// Append the new elements.\n\t\tthis.field.appendChild(this.hiddenInput);\n\t\tthis.field.insertBefore(this.tagContainer, this.originalInput);\n\t};\n\n\n\t// Attach all the needed event listeners.\n\tvar addListeners = function addListeners() {\n\t\t// TODO: Implement proper plain text pasting.\n\t\tthis.field.addEventListener('paste', preventDefault, false);\n\n\t\t// Make the dummy input field listen for keystrokes.\n\t\tthis.originalInput.addEventListener('keydown', keydownHandler.bind(this), false);\n\n\t\t// Delegate click/touchend events to the tag Elements.\n\t\tthis.tagContainer.addEventListener(eventType, clickTagHandler.bind(this), false);\n\t};\n\n\n\t// Updates Tagdog instances in case there are predefined tags.\n\tvar updateInstance = function updateInstance() {\n\t\tvar dummy = this.originalInput,\n\t\t\t\tdummyValues = (dummy.getAttribute('value') || \"\").split(',');\n\n\t\tdummyValues.forEach(function addTags(tagName) {\n\t\t\ttagName = this.ensureMaxlength(tagName);\n\t\t\tthis.addTag(tagName);\n\t\t}, this);\n\n\t\t// We don't need the name attribute.\n\t\tdummy.removeAttribute('name');\n\t};\n\n\n\t/**\n\t * Tagdog constructor.\n\t */\n\tvar Tagdog = function Tagdog(field, options) {\n\t\tif( !(this instanceof Tagdog) ) {\n\t\t\treturn new Tagdog(field, options);\n\t\t}\n\n\t\tcreateElements.call(this, field, options);\n\t\taddListeners.call(this);\n\t\tupdateInstance.call(this);\n\t};\n\n\n\t/**\n\t * Tagdog prototype functions.\n\t */\n\n\t// Cleans tag names of unwanted characters.\n\tTagdog.prototype.cleanTagName = function cleanTagName(tagName) {\n\t\treturn this.options.patterns.reduce(function replacer(tagName, pattern) {\n\t\t\treturn tagName.replace(pattern.regex, pattern.replace || '');\n\t\t}, tagName);\n\t};\n\n\n\t// Checks whether a tag already exists.\n\tTagdog.prototype.hasTag = function hasTag(tag) {\n\t\tvar tagName = isHTMLElement(tag) ? tag.textContent : tag;\n\t\treturn arrayContains(this.currentTags, tagName);\n\t};\n\n\n\t// Creates and returns new tag element.\n\tTagdog.prototype.createTag = function createTag(tagName, unsafe) {\n\t\tvar title = unsafe ? tagName : this.cleanTagName(tagName),\n\t\t\t\ttagNode = document.createElement('span');\n\n\t\ttagNode.textContent = title;\n\t\ttagNode.setAttribute('aria-hidden', true);\n\t\ttagNode.setAttribute('role', 'button');\n\t\ttagNode.setAttribute('data-title', this.options.tooltipTitle);\n\t\ttagNode.className = \"tagdog-tag\";\n\n\t\treturn tagNode;\n\t};\n\n\n\t// Adds a new tag element to the current Tagdog instance.\n\tTagdog.prototype.insertTagElement = function insertTagElement(tag, duplicates) {\n\t\tif(!duplicates && this.hasTag(tag.textContent)) return null;\n\n\t\ttag.classList.add('tagdog-tag');\n\n\t\tthis.currentTags.push(tag.textContent);\n\t\tthis.tagContainer.appendChild(tag);\n\t\tthis.hiddenInput.value = this.currentTags.join(',');\n\t\tthis.originalInput.value = '';\n\n\t\treturn tag;\n\t};\n\n\n\t// Adds a new tag to the current Tagdog instance.\n\tTagdog.prototype.addTag = function addTag(tagName) {\n\t\tif(!isString(tagName) || !tagName.trim() || this.hasTag(tagName)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.insertTagElement(this.createTag(tagName));\n\t};\n\n\n\t// Removes a tag based on its title (tag name).\n\tTagdog.prototype.removeTagByName = function removeTagByName(tagName) {\n\t\tvar tags = toArray(qsa('.tagdog-tag', this.tagContainer)),\n\t\t\t\tn = tags.length,\n\t\t\t\ttagElem, tag;\n\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagName), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\n\t\twhile(n > 0) {\n\t\t\ttagElem = tags[--n];\n\t\t\tif(tagElem.textContent === tag) {\n\t\t\t\ttag = this.tagContainer.removeChild(tagElem);\n\t\t\t\treturn removed;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\n\t//Removes a tag element.\n\tTagdog.prototype.removeTagByElement = function removeTagByElement(tagElement) {\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagElement.textContent), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\t\tvar tag = this.tagContainer.removeChild(tagElement);\n\n\t\treturn tag;\n\t};\n\n\n\t// Removes a tag and returns it.\n\tTagdog.prototype.removeTag = function removeTag(tag) {\n\t\treturn (typeof tag === 'string') ? this.removeTagByName(tag) : this.removeTagByElement(tag);\n\t};\n\n\n\t// Returns an Array with all current tag names.\n\tTagdog.prototype.getTags = function getTags(asString) {\n\t\treturn !asString ? this.currentTags : this.toLower(this.currentTags);\n\t};\n\n\n\t// Resets the Tagdog instance.\n\tTagdog.prototype.resetTags = function reset() {\n\t\tthis.originalInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.tagContainer.innerHTML = \"\";\n\t\tthis.currentTags.splice(0, this.currentTags.length);\n\t};\n\n\n\t// Converts a value to a String first and then to lower case, so we can\n\t// simply convert the whole currentTags Array to a lower case String.\n\tTagdog.prototype.toLower = function toLower(value) {\n\t\tif(!isString(value) && !isArray(value)) return '';\n\t\treturn String(value).toLowerCase();\n\t};\n\n\n\t// Makes sure a tagName is no longer than options.maxLength\n\tTagdog.prototype.ensureMaxlength = function ensureMaxlength(tagName) {\n\t\tvar maxLength = this.options.maxLength;\n\t\treturn tagName >= maxLength ? tagName : tagName.substring(0, maxLength);\n\t};\n\n\t// Checks, whether the provided value is an HTMLElement.\n\tTagdog.prototype.isHTMLElement = isHTMLElement;\n\n\n\t// Checks, whether the provided value is a NodeList.\n\tTagdog.prototype.isNodeList = isNodeList;\n\n\n\tvar extendTagdog = function extendTagdog(protoProps, staticProps) {\n\t\tvar Extended = function Extended(field, options) {\n\t\t\tif( !(this instanceof Extended) ) {\n\t\t\t\treturn new Extended(field, options);\n\t\t\t}\n\n\t\t\tTagdog.apply(this, arguments);\n\n\t\t\tif(staticProps) extend(this, staticProps);\n\t\t};\n\n\t\tExtended.prototype = extend(Tagdog.prototype, protoProps);\n\t\tExtended.prototype.constructor = Tagdog.prototype.constructor;\n\n\t\treturn Extended;\n\t};\n\n\n\t/*\n\t * The namespace is a decorator function. You can provide either a\n\t * CSS selector, an HTMLElement, a NodeList or nothing. The return\n\t * value will either be a single Tagdog instance or an Object which\n\t * property names are the name attributes of the input fields inside\n\t * the respective selected elements. If no field param is provided\n\t * the function will simply return instances for all elements that\n\t * match the selector `.tagdog-field`. No matches will result in a\n\t * return value of `null`.\n\t **/\n\tthis.tagdog = function tagdog(field, options, protoProps, staticProps) {\n\n\t\t// If `field` is falsy, simply call tagdog again\n\t\t// recursively and pass the default Tagdog selector.\n\t\tif(!field) {\n\t\t\treturn tagdog('.tagdog-field', options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is an HTMLElelent, return a single instance.\n\t\tif(isHTMLElement(field)) {\n\t\t\treturn (protoProps || staticProps) ?\n\t\t\t\textendTagdog(protoProps, staticProps)(field, options) :\n\t\t\t\tnew Tagdog(field, options);\n\t\t}\n\n\t\t// If `field` is a String, it's assumed it's a CSS selector.\n\t\t// Try to match as many elements as possible. If there is no\n\t\t// match, return `null`. If there is one match call tagdog\n\t\t// recursively and pass the HTMLElement so that tagdog can\n\t\t// return a single instance. If there are two or more matches\n\t\t// do the same, but instead provide the whole NodeList.\n\t\tif(isString(field)) {\n\t\t\tvar elements = qsa(field),\n\t\t\t\t\tn = elements.length;\n\n\t\t\tif(!n) return null;\n\n\t\t\tfield = n > 1 ? elements : elements[0];\n\n\t\t\treturn tagdog(field, options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is a NodeList return an Object of Tagdog instances.\n\t\tif(isNodeList(field)) {\n\t\t\tfield = toArray(field);\n\t\t\treturn field.reduce(function(obj, element) {\n\t\t\t\tvar inst = tagdog(element, options, protoProps, staticProps);\n\t\t\t\tobj[inst.name] = inst;\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\t\t}\n\t};\n\n}).call(this);\n"],"sourceRoot":"/source/"}
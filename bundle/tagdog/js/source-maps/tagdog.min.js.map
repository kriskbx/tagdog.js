{"version":3,"sources":["tagdog.js"],"names":["counter","eventType","window","ontouchend","keyCodes",8,13,188,"slice","Array","prototype","toString","Object","getType","obj","call","isString","isHTMLElement","HTMLElement","isNodeList","isArray","toArray","arrayContains","array","value","indexOf","qs","selector","element","document","querySelector","qsa","querySelectorAll","extend","receiver","key","emitter","emitters","arguments","n","length","i","keydownHandler","event","tag","tags","hiddenValue","this","hiddenInput","keyCode","preventDefault","ensureMaxLength","originalInput","currentTags","addTag","tagContainer","removeTag","clickTagHandler","target","className","parentNode","focus","createElements","field","options","patterns","regex","tooltipTitle","maxLength","maxTags","classList","add","name","getAttribute","createElement","setAttribute","appendChild","insertBefore","addListeners","addEventListener","bind","updateInstance","dummy","dummyValues","split","forEach","tagName","removeAttribute","Tagdog","events","cleanTagName","reduce","pattern","replace","createTagElement","unsafe","tagElement","hasTag","textContent","insertTagElement","duplicates","isMaxTags","push","join","emit","type","srcName","srcElement","getTags","timestamp","Date","now","addTags","removeTagByName","tagElem","splice","removeChild","removed","removeTagByElement","asString","toLower","resetTags","innerHTML","String","toLowerCase","substring","createTag","hasEvents","on","eventName","callback","off","once","self","selfDeleting","eventData","extendTagdog","protoProps","staticProps","Extended","apply","constructor","tagdog","elements","inst"],"mappings":"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","file":"tagdog.min.js","sourcesContent":["(function() {\n\t\n\t'use strict';\n\n\t/*\n\t * Private variables.\n\t **/\n\n\tvar counter = 0;\n\n\tvar eventType = window.ontouchend ? 'touchend' : 'click';\n\n\tvar keyCodes = {\n\t\t8: 'backspace',\n\t\t13: 'enter',\n\t\t188: ','\n\t};\n\n\n\t/*\n\t * Mostly private shortcuts and helper functions.\n\t **/\n\n\tvar slice = Array.prototype.slice;\n\n\tvar toString = Object.prototype.toString;\n\n\tvar typeError = function error(message) {\n\t\tthrow new TypeError(message);\n\t};\n\n\tvar getType = function getType(obj) {\n\t\treturn toString.call(obj).slice(8, -1);\n\t};\n\n\tvar isString = function isString(obj) {\n\t\treturn getType(obj) === 'String';\n\t};\n\n\tvar isHTMLElement = function isHTMLElement(obj) {\n\t\treturn obj instanceof HTMLElement;\n\t};\n\n\tvar isNodeList = function isNodeList(obj) {\n\t\treturn getType(obj) === 'NodeList';\n\t};\n\n\tvar isArray = function isArray(obj) {\n\t\treturn getType(obj) === 'Array';\n\t};\n\n\tvar isObject = function isObject(obj) {\n\t\treturn getType(obj) === 'Object';\n\t};\n\n\tvar toArray = function toArray(obj) {\n\t\treturn slice.call(obj);\n\t};\n\n\tvar arrayContains = function arrayContains(array, value) {\n\t\treturn array.indexOf(value) > -1;\n\t};\n\n\tvar qs = function qs(selector, element) {\n\t\treturn (element || document).querySelector(selector);\n\t};\n\n\tvar qsa = function qsa(selector, element) {\n\t\treturn (element || document).querySelectorAll(selector);\n\t};\n\n\t// A basic extend function always helps making things easier.\n\tvar extend = function extend(receiver /*, emitters */) {\n\t\tvar emitters = slice.call(arguments, 1),\n\t\t\t\tn = emitters.length,\n\t\t\t\ti = 0,\n\t\t\t\tkey, emitter;\n\n\t\tif(!n) return receiver;\n\n\t\tfor( ; i < n; i++ ) {\n\t\t\temitter = emitters[i];\n\t\t\tfor(key in emitter) {\n\t\t\t\treceiver[key] = emitter[key];\n\t\t\t}\n\t\t}\n\n\t\treturn receiver;\n\t};\n\n\n\t/**\n\t * Event Handlers.\n\t */\n\n\tvar keydownHandler = function keydownHandler(event) {\n\t\tvar hiddenValue = this.hiddenInput.value,\n\t\t\t\tkeyCode = keyCodes[event.keyCode],\n\t\t\t\ttag, tags;\n\n\t\tif(keyCode === 'enter' || keyCode === ',') {\n\t\t\tevent.preventDefault();\n\n\t\t\ttag = this.ensureMaxLength(this.originalInput.value);\n\n\t\t\tif(tag.length <= 0) return false;\n\n\t\t\tif(!arrayContains(this.currentTags, tag)) {\n\t\t\t\tthis.addTag(tag);\n\t\t\t}\n\t\t}\n\n\t\tif(keyCode === 'backspace' && hiddenValue.length > 0) {\n\t\t\tif(this.originalInput.value.length > 0) return false;\n\t\t\ttags = qsa('.tagdog-tag', this.tagContainer);\n\t\t\tthis.removeTag(tags[tags.length - 1]);\n\t\t}\n\t};\n\n\tvar preventDefault = function preventDefault(event) {\n\t\tevent.preventDefault();\n\t};\n\n\tvar clickTagHandler = function clickTagHandler(event) {\n\t\tvar target = event.target;\n\n\t\twhile(target.className !== 'tagdog-tag') {\n\t\t\tif(target === this.tagContainer) return;\n\t\t\ttarget = target.parentNode;\n\t\t}\n\n\t\tthis.removeTag(target);\n\n\t\t// Refocussing makes for a nicer mobile experience.\n\t\tthis.originalInput.focus();\n\t};\n\n\n\t/**\n\t * Private setup functions. Avoid polluting the instance API with\n\t * setup functions that should be called only once. rather call the\n\t * functions from within the constructor.\n\t */\n\n\t// Creates all the needed elements for each instance\n\tvar createElements = function createElements(field, options) {\n\n\t\tthis.options = extend({\n\t\t\t// Default replacement patterns\n\t\t\tpatterns: [{\n\t\t\t\t// Replace all leading and trailing white-space with the empty String.\n\t\t\t\tregex: /^\\s+|\\s+$/g\n\t\t\t}, {\n\t\t\t\t// Replace everything that does not match this pattern with the empty String.\n\t\t\t\tregex: /[^a-z0-9 -]+/gi\n\t\t\t}],\n\t\t\ttooltipTitle: \"Click to delete\",\n\t\t\tmaxLength: 255,\n\t\t\tmaxTags: 12\n\t\t}, options);\n\n\t\t// Assign the Tagdog element and add the actual tagdog CSS class, if not already defined.\n\t\tthis.field = isHTMLElement(field) ? field : qs(field);\n\t\tthis.field.classList.add('tagdog-field');\n\n\t\t// This is where the tags are saved.\n\t\tthis.currentTags = [];\n\n\t\t// originalInput is the provided input field used to enter the tags.\n\t\tthis.originalInput = qs('input', this.field);\n\t\tthis.name = this.originalInput.getAttribute('name') || 'tagdog_' + (++counter);\n\n\t\t// The hidden input field is the actual input field. It receives the name attribute of the dummy input field.\n\t\tthis.hiddenInput = document.createElement('input');\n\t\tthis.hiddenInput.setAttribute('type', 'hidden');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('name', this.name);\n\n\t\t// This new element contains the visual tags (tag nodes).\n\t\tthis.tagContainer = document.createElement('div');\n\t\tthis.tagContainer.setAttribute('aria-hidden', true);\n\t\tthis.tagContainer.className = 'tagdog-container';\n\n\t\t// Append the new elements.\n\t\tthis.field.appendChild(this.hiddenInput);\n\t\tthis.field.insertBefore(this.tagContainer, this.originalInput);\n\t};\n\n\n\t// Attach all the needed event listeners.\n\tvar addListeners = function addListeners() {\n\t\t// TODO: Implement proper plain text pasting.\n\t\tthis.field.addEventListener('paste', preventDefault, false);\n\n\t\t// Make the dummy input field listen for keystrokes.\n\t\tthis.originalInput.addEventListener('keydown', keydownHandler.bind(this), false);\n\n\t\t// Delegate click/touchend events to the tag Elements.\n\t\tthis.tagContainer.addEventListener(eventType, clickTagHandler.bind(this), false);\n\t};\n\n\n\t// Updates Tagdog instances in case there are predefined tags.\n\tvar updateInstance = function updateInstance() {\n\t\tvar dummy = this.originalInput,\n\t\t\t\tdummyValues = dummy.getAttribute('value');\n\t\t\t\t\n\t\tif(!dummyValues) return;\n\n\t\tdummyValues.split(',').forEach(function addTags(tagName) {\n\t\t\ttagName = this.ensureMaxLength(tagName);\n\t\t\tthis.addTag(tagName);\n\t\t}, this);\n\n\t\t// We don't need the name attribute.\n\t\tdummy.removeAttribute('name');\n\t};\n\n\n\t/**\n\t * Tagdog constructor.\n\t */\n\tvar Tagdog = function Tagdog(field, options) {\n\t\tif( !(this instanceof Tagdog) ) {\n\t\t\treturn new Tagdog(field, options);\n\t\t}\n\t\t\n\t\tthis.events = {};\n\n\t\tcreateElements.call(this, field, options);\n\t\taddListeners.call(this);\n\t\tupdateInstance.call(this);\n\t};\n\n\n\t/**\n\t * Tagdog prototype functions.\n\t */\n\n\t// Cleans tag names of unwanted characters.\n\tTagdog.prototype.cleanTagName = function cleanTagName(tagName) {\n\t\t\n\t\ttagName = this.ensureMaxLength(tagName);\n\t\t\n\t\treturn this.options.patterns.reduce(function replacer(tagName, pattern) {\n\t\t\treturn tagName.replace(pattern.regex, pattern.replace || '');\n\t\t}, tagName);\n\t};\n\n\n\t// Creates and returns new tag element.\n\tTagdog.prototype.createTagElement = function createTagElement(tagName, unsafe) {\n\t\tvar tagElement;\n\t\t\t\t\n\t\tif(this.hasTag(tagName)) return null;\n\t\t\n\t\ttagElement = document.createElement('span');\n\t\ttagElement.textContent = unsafe ? tagName : this.cleanTagName(tagName);\n\t\ttagElement.setAttribute('aria-hidden', true);\n\t\ttagElement.setAttribute('role', 'button');\n\t\ttagElement.setAttribute('data-title', this.options.tooltipTitle);\n\t\ttagElement.className = \"tagdog-tag\";\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag element to the current Tagdog instance.\n\tTagdog.prototype.insertTagElement = function insertTagElement(tagElement, duplicates) {\n\t\tvar tagName;\n\t\t\n\t\tif(!duplicates && this.hasTag(tagElement.textContent)) return null;\n\t\tif(this.isMaxTags()) return null;\n\n\t\ttagElement.classList.add('tagdog-tag');\n\t\t\n\t\ttagName = tagElement.textContent;\n\n\t\tthis.currentTags.push(tagName);\n\t\tthis.tagContainer.appendChild(tagElement);\n\t\tthis.hiddenInput.value = this.currentTags.join(',');\n\t\tthis.originalInput.value = '';\n\n\t\tthis.emit('taginserted', {\n\t\t\ttype: 'taginserted',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\tcurrentTags: this.getTags(),\n\t\t\ttagElement: tagElement,\n\t\t\ttagName: tagName,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\n\t\treturn tagElement;\n\t};\n\n\n\t// Adds a new tag to the current Tagdog instance.\n\tTagdog.prototype.addTag = function addTag(tag) {\n\t\tvar tagElement = isHTMLElement(tag) ? tag : this.createTagElement(tag);\n\t\treturn this.insertTagElement(tagElement);\n\t};\n\n\n\t// Adds multiple tags in the form of tag names, elements or arrays.\n\tTagdog.prototype.addTags = function addTag(/* args */) {\n\t\tvar tags = slice.call(arguments);\n\n\t\ttags.forEach(function add(tag) {\n\t\t\treturn this.addTag(tag);\n\t\t}, this);\n\t};\n\t\n\n\t// Checks whether a tag already exists.\n\tTagdog.prototype.hasTag = function hasTag(tag) {\n\t\tvar tagName = isHTMLElement(tag) ? tag.textContent : tag;\n\t\ttagName = this.ensureMaxLength(tagName);\n\t\treturn arrayContains(this.currentTags, tagName);\n\t};\n\n\n\t// Removes a tag based on its title (tag name).\n\tTagdog.prototype.removeTagByName = function removeTagByName(tagName) {\n\t\tvar tags = toArray(qsa('.tagdog-tag', this.tagContainer)),\n\t\t\t\tn = tags.length,\n\t\t\t\ttagElem, tag;\n\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagName), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\n\t\twhile(n > 0) {\n\t\t\ttagElem = tags[--n];\n\t\t\tif(tagElem.textContent === tag) {\n\t\t\t\ttag = this.tagContainer.removeChild(tagElem);\n\n\t\t\t\tthis.emit('tagremoved', {\n\t\t\t\t\ttype: 'tagremoved',\n\t\t\t\t\tsrcName: this.name,\n\t\t\t\t\tsrcElement: this.field,\n\t\t\t\t\tcurrentTags: this.getTags(),\n\t\t\t\t\ttagElement: tag,\n\t\t\t\t\ttagName: tag.textContent,\n\t\t\ttimestamp: Date.now()\n\t\t\t\t});\n\n\t\t\t\treturn removed;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\n\t//Removes a tag element.\n\tTagdog.prototype.removeTagByElement = function removeTagByElement(tagElement) {\n\t\tthis.currentTags.splice(this.currentTags.indexOf(tagElement.textContent), 1);\n\t\tthis.hiddenInput.value = this.currentTags.join(\",\");\n\t\tvar tag = this.tagContainer.removeChild(tagElement);\n\n\t\tthis.emit('tagremoved', {\n\t\t\ttype: 'tagremoved',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\tcurrentTags: this.getTags(),\n\t\t\ttagElement: tag,\n\t\t\ttagName: tag.textContent,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\n\t\treturn tag;\n\t};\n\n\n\t// Removes a tag and returns it.\n\tTagdog.prototype.removeTag = function removeTag(tag) {\n\t\treturn (typeof tag === 'string') ? this.removeTagByName(tag) : this.removeTagByElement(tag);\n\t};\n\n\n\t// Returns an Array with all current tag names.\n\tTagdog.prototype.getTags = function getTags(asString) {\n\t\treturn !asString ? this.currentTags : this.toLower(this.currentTags);\n\t};\n\n\n\t// Resets the Tagdog instance.\n\tTagdog.prototype.resetTags = function reset() {\n\t\tthis.originalInput.setAttribute('value', '');\n\t\tthis.hiddenInput.setAttribute('value', '');\n\t\tthis.tagContainer.innerHTML = \"\";\n\t\tthis.currentTags.splice(0, this.currentTags.length);\n\n\t\tthis.emit('fieldreset', {\n\t\t\ttype: 'fieldreset',\n\t\t\tsrcName: this.name,\n\t\t\tsrcElement: this.field,\n\t\t\ttimestamp: Date.now()\n\t\t});\n\t};\n\n\n\t// Returns `true`, if the maxTags limit is reached, `false` otherwise.\n\tTagdog.prototype.isMaxTags = function isMaxTags() {\n\t\treturn this.getTags().length >= this.options.maxTags;\n\t};\n\n\n\t// Converts a value to a String first and then to lower case, so we can\n\t// simply convert the whole currentTags Array to a lower case String.\n\tTagdog.prototype.toLower = function toLower(value) {\n\t\tif(!isString(value) && !isArray(value)) return '';\n\t\treturn String(value).toLowerCase();\n\t};\n\n\n\t// Makes sure a tagName is no longer than options.maxLength\n\tTagdog.prototype.ensureMaxLength = function ensureMaxLength(tagName) {\n\t\tvar maxLength = this.options.maxLength;\n\t\treturn tagName >= maxLength ? tagName : tagName.substring(0, maxLength);\n\t};\n\n\t// Checks, whether the provided value is an HTMLElement.\n\tTagdog.prototype.isHTMLElement = isHTMLElement;\n\n\n\t// Checks, whether the provided value is a NodeList.\n\tTagdog.prototype.isNodeList = isNodeList;\n\t\n\n\t// Alias of Tagdog#createTagElement. Already deprecated, will be removed in later versions.\n\tTagdog.prototype.createTag = Tagdog.prototype.createTagElement;\n\t\n\t\n\t/*\n\t * Events\n\t **/\n\t\n\tTagdog.prototype.hasEvents = function hasEvents() {\n\t\tvar events = this.events,\n\t\t\t\tkey;\n\t\t\n\t\tfor(key in events) if(events[key] && events[key].length) return true;\n\t\treturn false;\n\t};\n\t\n\tTagdog.prototype.on = function on(eventName, callback) {\n\t\tvar events = this.events;\n\t\n\t\tevents[eventName] = events[eventName] || [];\n\t\tevents[eventName].push(callback);\n\t};\n\t\n\tTagdog.prototype.off = function off(eventName, callback) {\n\t\tvar events = this.events, i, n;\n\t\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tif(events[eventName][i] === callback) {\n\t\t\t\t\tevents[eventName].splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\tTagdog.prototype.once = function once(eventName, callback) {\n\t\tvar self = this,\n\t\t    events = this.events;\n\t\n\t\tvar selfDeleting = function selfDeleting(event) {\n\t\t\tcallback(event);\n\t\t\tself.off(eventName, selfDeleting);\n\t\t};\n\t\n\t\tthis.on(eventName, selfDeleting);\n\t};\n\n\tTagdog.prototype.emit = function emit(eventName, eventData) {\n\t\tvar events = this.events, callback, i, n;\n\t\n\t\tif(events[eventName]) {\n\t\t\tfor(i = 0, n = events[eventName].length; i < n; i++) {\n\t\t\t\tcallback = events[eventName][i];\n\t\t\t\tif(callback) {\n\t\t\t\t\tcallback(eventData || {});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/*\n\t * With this function the Tagdog constructor is extensible.\n\t **/\n\tvar extendTagdog = function extendTagdog(protoProps, staticProps) {\n\t\tvar Extended = function Extended(field, options) {\n\t\t\tif( !(this instanceof Extended) ) {\n\t\t\t\treturn new Extended(field, options);\n\t\t\t}\n\n\t\t\tTagdog.apply(this, arguments);\n\n\t\t\tif(staticProps) extend(this, staticProps);\n\t\t};\n\n\t\tExtended.prototype = extend(Tagdog.prototype, protoProps);\n\t\tExtended.prototype.constructor = Tagdog.prototype.constructor;\n\n\t\treturn Extended;\n\t};\n\n\n\t/*\n\t * The namespace is a decorator function. You can provide either a\n\t * CSS selector, an HTMLElement, a NodeList or nothing. The return\n\t * value will either be a single Tagdog instance or an Object which\n\t * property names are the name attributes of the input fields inside\n\t * the respective selected elements. If no field param is provided\n\t * the function will simply return instances for all elements that\n\t * match the selector `.tagdog-field`. No matches will result in a\n\t * return value of `null`.\n\t **/\n\tthis.tagdog = function tagdog(field, options, protoProps, staticProps) {\n\n\t\t// If `field` is falsy, simply call tagdog again\n\t\t// recursively and pass the default Tagdog selector.\n\t\tif(!field) {\n\t\t\treturn tagdog('.tagdog-field', options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is an HTMLElelent, return a single instance.\n\t\tif(isHTMLElement(field)) {\n\t\t\treturn (protoProps || staticProps) ?\n\t\t\t\textendTagdog(protoProps, staticProps)(field, options) :\n\t\t\t\tnew Tagdog(field, options);\n\t\t}\n\n\t\t// If `field` is a String, it's assumed it's a CSS selector.\n\t\t// Try to match as many elements as possible. If there is no\n\t\t// match, return `null`. If there is one match call tagdog\n\t\t// recursively and pass the HTMLElement so that tagdog can\n\t\t// return a single instance. If there are two or more matches\n\t\t// do the same, but instead provide the whole NodeList.\n\t\tif(isString(field)) {\n\t\t\tvar elements = qsa(field),\n\t\t\t\t\tn = elements.length;\n\n\t\t\tif(!n) return null;\n\n\t\t\tfield = n > 1 ? elements : elements[0];\n\n\t\t\treturn tagdog(field, options, protoProps, staticProps);\n\t\t}\n\n\t\t// If `field` is a NodeList return an Object of Tagdog instances.\n\t\tif(isNodeList(field)) {\n\t\t\tfield = toArray(field);\n\t\t\treturn field.reduce(function(obj, element) {\n\t\t\t\tvar inst = tagdog(element, options, protoProps, staticProps);\n\t\t\t\tobj[inst.name] = inst;\n\t\t\t\treturn obj;\n\t\t\t}, {});\n\t\t}\n\t};\n\n}).call(this);\n"],"sourceRoot":"/source/"}